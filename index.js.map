{"version":3,"file":"index.js","sources":["src/actions.js","src/model.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport decorate from 'k-mst-purifier'\nimport pathToRegexp from 'path-to-regexp'\n\nexport const afterCreate = self => () => {\n  self.init()\n}\n\nexport const go = self => (screenName, params = null) => {\n  // get screen reference from name\n  const screen = self.screens.find(sc => sc.name === screenName)\n\n  // save to the store\n  self.current = screen\n  self.params = params\n\n  // save to the navigator\n  const toPath = pathToRegexp.compile(screen.path)\n  window.history.pushState(null, screen.name, toPath(params))\n}\n\nexport const init = self => () => {\n  const { pathname } = window.location\n\n  let found = false\n  for (let i = 0; i < self.screens.length && !found; i += 1) {\n    const screen = self.screens[i]\n    const params = []\n    const match = pathToRegexp(screen.path, params, { sensitive: true }).exec(pathname)\n\n    found = !!match\n    if (found) {\n      self.go(\n        screen.name,\n        params\n          .map(({ name }, index) => ({ [name]: match[index + 1] }))\n          .reduce(\n            (acc, curr) => ({ ...acc, ...curr }),\n            {},\n          ),\n      )\n    }\n  }\n}\n\nexport default decorate({\n  afterCreate,\n  go,\n  init,\n})\n","import { types } from 'mobx-state-tree'\nimport actions from './actions'\n\nconst ScreenDefinition = types\n  .model({\n    name: types.identifier(types.string),\n    path: types.string,\n  })\n  .named('ScreenDefinition')\n\nexport default types\n  .model({\n    screens: types.array(ScreenDefinition),\n    params: types.maybe(types.map(types.string)),\n    current: types.maybe(types.reference(ScreenDefinition)),\n  })\n  .named('Router')\n  .actions(actions)\n  // Views:\n  //  get current (Screen)\n  // get params (current.params)\n"],"names":["afterCreate","init","go","screenName","params","screen","self","screens","find","sc","name","current","toPath","pathToRegexp","compile","path","history","pushState","pathname","window","location","found","i","match","sensitive","exec","map","index","reduce","acc","curr","length","decorate","ScreenDefinition","types","model","identifier","string","named","array","maybe","reference","actions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,AAGO,IAAMA,cAAc,SAAdA,WAAc;SAAQ,YAAM;SAClCC,IAAL;GADyB;CAApB;;AAIP,AAAO,IAAMC,KAAK,SAALA,EAAK;SAAQ,UAACC,UAAD,EAA+B;QAAlBC,MAAkB,uEAAT,IAAS;;;QAEjDC,SAASC,KAAKC,OAAL,CAAaC,IAAb,CAAkB;aAAMC,GAAGC,IAAH,KAAYP,UAAlB;KAAlB,CAAf;;;SAGKQ,OAAL,GAAeN,MAAf;SACKD,MAAL,GAAcA,MAAd;;;QAGMQ,SAASC,aAAaC,OAAb,CAAqBT,OAAOU,IAA5B,CAAf;WACOC,OAAP,CAAeC,SAAf,CAAyB,IAAzB,EAA+BZ,OAAOK,IAAtC,EAA4CE,OAAOR,MAAP,CAA5C;GAVgB;CAAX;;AAaP,AAAO,IAAMH,OAAO,SAAPA,IAAO;SAAQ,YAAM;QACxBiB,QADwB,GACXC,OAAOC,QADI,CACxBF,QADwB;;;QAG5BG,QAAQ,KAAZ;;+BACSC,CAJuB;UAKxBjB,SAASC,KAAKC,OAAL,CAAae,CAAb,CAAf;UACMlB,SAAS,EAAf;UACMmB,QAAQV,aAAaR,OAAOU,IAApB,EAA0BX,MAA1B,EAAkC,EAAEoB,WAAW,IAAb,EAAlC,EAAuDC,IAAvD,CAA4DP,QAA5D,CAAd;;cAEQ,CAAC,CAACK,KAAV;UACIF,KAAJ,EAAW;aACJnB,EAAL,CACEG,OAAOK,IADT,EAEEN,OACGsB,GADH,CACO,gBAAWC,KAAX;cAAGjB,IAAH,QAAGA,IAAH;oCAAyBA,IAAzB,EAAgCa,MAAMI,QAAQ,CAAd,CAAhC;SADP,EAEGC,MAFH,CAGI,UAACC,GAAD,EAAMC,IAAN;8BAAqBD,GAArB,EAA6BC,IAA7B;SAHJ,EAII,EAJJ,CAFF;;;;SAPC,IAAIR,IAAI,CAAb,EAAgBA,IAAIhB,KAAKC,OAAL,CAAawB,MAAjB,IAA2B,CAACV,KAA5C,EAAmDC,KAAK,CAAxD,EAA2D;YAAlDA,CAAkD;;GAJzC;CAAb;;AAwBP,cAAeU,SAAS;0BAAA;QAAA;;CAAT,CAAf;;AC1CA,IAAMC,mBAAmBC,oBACtBC,KADsB,CAChB;QACCD,oBAAME,UAAN,CAAiBF,oBAAMG,MAAvB,CADD;QAECH,oBAAMG;CAHS,EAKtBC,KALsB,CAKhB,kBALgB,CAAzB;;AAOA,YAAeJ,oBACZC,KADY,CACN;WACID,oBAAMK,KAAN,CAAYN,gBAAZ,CADJ;UAEGC,oBAAMM,KAAN,CAAYN,oBAAMR,GAAN,CAAUQ,oBAAMG,MAAhB,CAAZ,CAFH;WAGIH,oBAAMM,KAAN,CAAYN,oBAAMO,SAAN,CAAgBR,gBAAhB,CAAZ;CAJE,EAMZK,KANY,CAMN,QANM,EAOZI,OAPY,CAOJA,OAPI,CAAf;;;;;;;;;;;"}